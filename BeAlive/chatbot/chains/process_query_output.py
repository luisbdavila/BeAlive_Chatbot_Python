from langchain_core.output_parsers.string import StrOutputParser
from langchain.schema.runnable.base import Runnable
from langchain_openai import ChatOpenAI
from BeAlive.chatbot.chains.base import PromptTemplate, generate_prompt_templates


class QueryProcessingChain(Runnable):
    """
    Processes the output of the SQL query and generates a response to the user.

    Attributes:
    ----------
    llm: ChatOpenAI
        The language model used for generating the response.~
    prompt_template: PromptTemplate
        The template for generating the prompt for the language model.
    chain: Chain
        The chain structured for processing the output of the SQL query.

    Methods:
    -------
    __init__(llm, memory)
        Initializes the QueryProcessingChain with the provided language model
        and memory.

    invoke(inputs, config=None, **kwargs)
        Processes the output of the SQL query and generates a response to the
        user.

    """
    def __init__(self,
                 llm=ChatOpenAI(temperature=0.0, model='gpt-3.5-turbo'),
                 memory=False):

        """
        Initializes the QueryProcessingChain with the provided language model
        and memory.

        Parameters:
        ----------
        llm: ChatOpenAI
            The language model used for generating the response.
        memory: bool
            A flag indicating whether to use memory for processing user input.

        """
        super().__init__()

        self.llm = llm
        prompt_template = PromptTemplate(
            system_template="""
            From the string which is the result of the
            {sql_query} sqlite3 query create
            a list of elements grouped by activity with the relevant
            information displayed for each element,
            in a human interpretable format. In case the input contains
            only an activity name and a number, create a sentence
            informing the host of the number of participants in their activity.
            If the input is in the form [(activity_name, username),...]
            don't infer the activity host.
            Have the name as the title and then the different elements as
            bullet points. Put the title and field titles in bold.
            """,
            human_template="User Query: {user_input}",
        )

        self.prompt = generate_prompt_templates(prompt_template, memory)
        self.output_parser = StrOutputParser()

        self.chain = self.prompt | self.llm | self.output_parser

    def invoke(self, inputs):

        """
        Processes the output of the SQL query and generates a response to the
        user.

        Parameters:
        ----------
        inputs: dict
            A dictionary containing the user input and the SQL query.

        Returns:
        ----------
                The response generated by the language model.

        """

        try:
            return self.chain.invoke({
                    "user_input": inputs["user_input"],
                    "sql_query": inputs["sql_query"]
                    })
        except:
            return "Error during execution:"
