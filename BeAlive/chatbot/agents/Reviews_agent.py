from typing import List
from langchain.agents import AgentExecutor, create_tool_calling_agent
from langchain_openai import ChatOpenAI
from langchain_core.runnables.base import Runnable
from BeAlive.chatbot.chains.base import PromptTemplate, generate_agent_prompt_template
from BeAlive.chatbot.tools.review_users import ReviewUsersTool
from BeAlive.chatbot.tools.review_activity import ReviewActivityTool


class ReviewsAgent(Runnable):
    """
    An agent responsible for managing reviews related to users and activities,
    that allows hosts to review users and participants to review activities.

    Attributes:
    ----------
    llm : ChatOpenAI
        The language model instance used for processing the queries.
    tools : List
        A list of tools that interact with the company database.
    prompt : PromptTemplate
        The prompt template that defines the system and human inputs for the
        agent's interaction.
    agent : Agent
        The agent responsible for using the tools to answer the queries.
    _agent_executor : AgentExecutor
        The executor that manages invoking the agent.

    Methods:
    -------
    __init__(self, llm: ChatOpenAI):
        Initializes the agent with the provided language model and sets up the
        required tools and prompt template.

    invoke(self, inputs: dict, config=None, **kwargs):
        Executes the agent with the provided inputs and returns the output
        generated by the language model or an error message.
    """

    def __init__(self, llm: ChatOpenAI = ChatOpenAI(temperature=0.0, model='gpt-3.5-turbo')):
        """
        Initializes the agent with the provided language model and sets up the
        required tools and prompt template.

        Parameters:
        ----------
        llm : ChatOpenAI
            The language model instance used for processing the queries.

        """

        self.llm = llm
        review_users = ReviewUsersTool()
        review_activity = ReviewActivityTool()
        self.tools: List = [review_users, review_activity]

        # Define the prompt template for product identification
        prompt_template = PromptTemplate(
            system_template="""
            You are now connected to the company database.
            You have acess to the previous conversation history to personalize
            the conversation.
            You can use the following tools to interact with the database and
            answer the host and participant requests:

            1. Review Users:  Allow the host review users who took part in a
            given activity.
            2. Review Activities: Allow participants to review activities they
            took part in.

            If none of the above tools are needed, you can answer the host in
            a polite manner.
            """,
            human_template="Customer Query: {user_input}",
        )

        self.prompt = generate_agent_prompt_template(prompt_template)
        self.agent = create_tool_calling_agent(self.llm, self.tools, self.prompt)
        self._agent_executor = AgentExecutor(agent=self.agent, tools=self.tools)

    def invoke(self, inputs: dict, config=None, **kwargs):
        """
        Executes the agent with the provided inputs and returns the output
        generated by the language model or an error message.

        Parameters:
        ----------
        inputs : dict
            A dictionary containing the user input and the chat history.
        config : dict, optional
            Additional configuration parameters for the agent.

        Returns:
        -------
        str
            The output generated by the language model or an error message.
        """

        try:
            raw_response = self._agent_executor.invoke({
                            "user_input": inputs["user_input"],
                            "chat_history": []
                            }, config)

            return raw_response['output']

        except:
            return "An error occurred while invoking the agent. Be more clear."
