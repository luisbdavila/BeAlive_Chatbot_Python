from typing import List
from langchain.agents import AgentExecutor, create_tool_calling_agent
from langchain_openai import ChatOpenAI
from langchain_core.runnables.base import Runnable
from BeAlive.chatbot.chains.base import PromptTemplate, generate_agent_prompt_template
from BeAlive.chatbot.tools.check_activity_reservation import CheckActivityReservationTool
from BeAlive.chatbot.tools.check_activity_reviews import CheckActivityReviewsTool
from BeAlive.chatbot.tools.check_number_participants import CheckActivityNumberParticipantsTool


class CheckAgent(Runnable):
    """
    An agent responsible for interacting with a company database to answer
    related to activity reservations, reviews, and participant numbers.

    Attributes:
    ----------
    llm : ChatOpenAI
        The language model instance used for processing the queries.
    tools : List
        A list of tools that interact with the company database.
    prompt : PromptTemplate
        The prompt template that defines the system and human inputs for the
        agent's interaction.
    agent : Agent
        The agent responsible for using the tools to answer the queries.
    _agent_executor : AgentExecutor
        The executor that manages invoking the agent.

    Methods:
    -------
    __init__(self, llm: ChatOpenAI):
        Initializes the agent with the provided language model and sets up the
        required tools and prompt template.

    invoke(self, inputs: dict, config=None, **kwargs):
        Executes the agent with the provided inputs and returns the output
        generated by the language model or an error message.
    """

    def __init__(self, llm: ChatOpenAI = ChatOpenAI(temperature=0.0, model='gpt-3.5-turbo')):
        """
        Initializes the agent with the provided language model
        and sets up the required tools.

        Parameters:
        ----------
        llm : ChatOpenAI
            The language model instance used for processing the queries.

        """

        self.llm = llm
        check_activity_reservations = CheckActivityReservationTool()
        check_activity_reviews = CheckActivityReviewsTool()
        check_activity_number_participants = CheckActivityNumberParticipantsTool()
        self.tools: List = [check_activity_reservations,
                            check_activity_reviews,
                            check_activity_number_participants]

        # Define the prompt template for product identification
        prompt_template = PromptTemplate(
            system_template="""
            You are now connected to the company database.
            You have acess to the previous conversation history to personalize
            the conversation.
            You can use the following tools to interact with the database and
            answer the host requests:

            1. Check Activity Reservations: Check the reservations or
            partcipants for a given activity.
            2. Check Activity Reviews: Check the reviews for a given activity.
            3. Check Activity Number of participants: Check the number of
            participants for a given activity

            If none of the above tools are needed, you can answer the host in
            a polite manner.
            """,
            human_template="Customer Query: {user_input}",
        )

        self.prompt = generate_agent_prompt_template(prompt_template)
        self.agent = create_tool_calling_agent(self.llm, self.tools, self.prompt)
        self._agent_executor = AgentExecutor(agent=self.agent, tools=self.tools)

    def invoke(self, inputs: dict, config=None, **kwargs):

        """
        Executes the agent with the provided inputs and returns the output
        generated by the language model or an error message.

        Parameters:
        ----------
        inputs : dict
            A dictionary containing the user input.
        config : dict, optional
            Additional configuration parameters.
        **kwargs : dict
            Additional keyword arguments.

        Returns:
        ----------
        str
            The output generated by the language model or an error message.

        """

        try:
            raw_response = self._agent_executor.invoke({
                            "user_input": inputs["user_input"],
                            "chat_history": []
                            }, config)

            return raw_response['output']
        except:
            return "An error occurred."
